package com.naicha.app.service.impl;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.naicha.app.dao.TaskDao;
import com.naicha.app.mode.Task;
import com.naicha.app.service.TaskService;

@Service
@Transactional
public class TaskServiceImpl implements TaskService {

	@Autowired
	private TaskDao taskDao;
	
	@Override
	public Task save(Task task) {
		return taskDao.save(task);
	}

	@Override
	public List<Task> findByTime() {
		List<Object[]> objList = taskDao.findByTime();
		List<Task> taskList =  new ArrayList<Task>();
		for (Object[] obj : objList) {
			Task task  = convert(obj);
			taskList.add(task);
		}
		return taskList;
	}

	@Override
	public List<Task> findByTimeSlipeUp(String servicesTime) {
		List<Object[]> objList = taskDao.findByTimeSlipeUp(servicesTime);
		List<Task> taskList =  new ArrayList<Task>();
		for (Object[] obj : objList) {
			Task task  = convert(obj);
			taskList.add(task);
		}
		return taskList;
	}

	private Task convert(Object[] obj){
		Task task = new Task();
		//t.id,t.userId,taskType,reward,servicesTime,timeLength, publicTime,notes,location,headPicture,tu.counts as signupCount , c.counts as collectionCount
//		    0       1      2       3        4            5           6        7       8       9            10                               11                                    
		task.setId((Integer) obj[0]);
		task.setUserId((Integer) obj[1]);
		task.setTaskType((Integer) obj[2]);
		task.setReward((Integer) obj[3]);
		task.setServicesTime((Date) obj[4]);
		task.setTimeLength((Integer) obj[5]);
		task.setPublicTime((Date) obj[6]);
		task.setNotes((String) obj[7]);
		task.setLocation((String) obj[8]);
		task.setHeadPicture((String) obj[9]);
		task.setSignupCount((BigInteger) obj[10]);
		task.setCollectionCount((BigInteger) obj[11]);
		
		//时间的另外一种展示方法
		String relativeToCurrentTime = getDayString((Date) obj[4]);
		task.setRelativeToCurrentTime(relativeToCurrentTime);
		//距离报名截止时间
		String toClosingTime = calcDateTime((Date) obj[4]);
		task.setRelativeToClosingTime(toClosingTime);
		return task;
	}
	@SuppressWarnings("deprecation")
	private  String getDayString(Date startDate){
		int month = startDate.getMonth();
		int date = startDate.getDate();
		int hour = startDate.getHours();
		int offSet = Calendar.getInstance().getTimeZone().getRawOffset();
		long today = (System.currentTimeMillis()+offSet)/86400000;
		long start = (startDate.getTime()+offSet)/86400000;
		switch ((int)(start-today)) {
		case -2:
			return  "前天  "+hour+"点" ;
		case -1:
			return "昨天  "+hour+"点";
		case 0:
			return  "今天  "+hour+"点";
		case 1:
			return  "明天  "+hour+"点";
		case 2:
			return "后天  "+hour+"点";
		default:
			 return month+"月"+date+"日  "+hour+"点";
		}
	}
	
	private String calcDateTime(Date d) {
		Long t = d.getTime();
		Long now = new Date().getTime();
		long ss = (t-now) / (1000); // 共计秒数
		int hh = (int) ss / 3600; // 共计小时数
		int day =hh/24;
		int hour =hh%24;
		if (hh > 24) {
			return day + "天"+hour+"小时";
		} else {
			return hh + "小时";
		} 
	}

	/**
	 * 任务详情
	 */
	@Override
	public Task findDetail(Integer id) {
		Object[] obj = taskDao.findDetail(id);
		Task task = convert2(obj);
		return task;
	}
	
	private Task convert2(Object[] obj){
		Task task = new Task();
//t.id,taskType,reward,servicesTime,timeLength, notes,t.userId,u.headPicture,u.name,u.sex,u.birthday,tu.counts as signupCount
//	0     1       2      3            4           5      6         7           8      9       10                        11               	
		task.setId((Integer) obj[0]);
		task.setTaskType((Integer) obj[1]);
		task.setReward((Integer) obj[2]);
		task.setServicesTime((Date) obj[3]);
		task.setTimeLength((Integer) obj[4]);
		task.setNotes((String) obj[5]);
		task.setUserId((Integer) obj[6]);
		task.setHeadPicture((String) obj[7]);
		task.setName((String) obj[8]);
		task.setSex((Integer) obj[9]);
		task.setAge(getAge((Date) obj[10]));
		task.setSignupCount((BigInteger) obj[11]);
		
		//时间的另外一种展示方法
		String relativeToCurrentTime = getDayString((Date) obj[3]);
		task.setRelativeToCurrentTime(relativeToCurrentTime);
		//距离报名截止时间
		String toClosingTime = calcDateTime((Date) obj[3]);
		task.setRelativeToClosingTime(toClosingTime);
		return task;
	}
	private Integer getAge(Date mydate){
		  Date date=new Date();     
		  long day=(date.getTime()-mydate.getTime())/(24*60*60*1000) + 1;
		  Integer year=(int) (day/365);
		return year;
		}
}
